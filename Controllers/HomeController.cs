using System.Diagnostics;
using Microsoft.AspNetCore.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Hosting;
using SelfAI.Models;
using SelfAI.Services.Interfaces;
using SelfAI.ViewModels;

namespace SelfAI.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        //TEST FÝELD
        private readonly IRenderNetAssetService _renderNetService;

        public HomeController(ILogger<HomeController> logger, IRenderNetAssetService renderNetService)
        {
            _logger = logger;
            _renderNetService = renderNetService;
        }

        #region Home sayfasý iþlemleri
        //Home sayfasýný açar!
        public IActionResult Index()
        {
            
            return View();
            
        }

        public IActionResult UploadImageAsync()
        {
            return View();
        }

        //Home sayfasýndaki formu gönderir!
        [HttpPost]
        public IActionResult Index(UserEmailViewModel model)
        {
            if(!ModelState.IsValid)
            {
                return View(model);
            }

            /*
             * Burada, modele girilen e - posta adresini ilk olarak Cloudflare API üzerinden bot olup olmadýðýný kontrol edeceðiz.

             * Eðer bot deðilse, e-posta adresini FireBase Auth API'yi üzerinden, kayýtlý deðilse
             * kardedeceðiz veya kayýtlý ise oturumu açacaðýz.(FiraBase Auth bunu otomatik yapar)
             */

            return View();
        }
        #endregion

        public IActionResult Privacy()
        {
            return View();
        }

        // Global hata yakalama metodu
        public IActionResult Error()
        {
            // Hata bilgilerini alalým
            var context = HttpContext.Features.Get<IExceptionHandlerFeature>();

            // Hata nesnesini alalým
            var exception = context?.Error; // Null olma durumu için null kontrolü yapýyoruz(?)

            // Hata detaylarýný loglayalým
            _logger.LogError(exception, "Global hata yakalandý: {Message}", exception?.Message);

            //Kullanýcýya gösterilecek hata sayfasý modeli
            var errorViewModel = new ErrorViewModel
            {
                Title = "Bir hata oluþtu",
                Message = "Üzgünüz, iþleminizi tamamlayamadýk. Lütfen tekrar deneyiniz."
            };

            return View(errorViewModel);
        }
    }
}
