@{
    ViewData["Title"] = "Görsel Yükleme";
}

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        #imageContainer {
            position: relative;
            width: 384px;
            height: 384px;
            margin: 0 auto;
            overflow: hidden;
            display: none;
            text-align: center;
        }

        #uploadedImage {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
            border-radius: 8px;
        }

        #frame {
            position: absolute;
            width: 192px;
            height: 192px;
            border: 3px dashed #007bff;
            background: rgba(0, 123, 255, 0.1);
            cursor: move;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
            display: none;
        }

            #frame:hover {
                border-color: #0056b3;
                background: rgba(0, 86, 179, 0.2);
            }

        .file-select {
            position: relative;
            display: inline-block;
            overflow: hidden;
        }

            .file-select input[type=file] {
                position: absolute;
                left: 0;
                top: 0;
                opacity: 0;
                cursor: pointer;
                width: 100%;
                height: 100%;
            }

        #confirmButton {
            margin-bottom: 3cm; /* Tamam butonunun altına 3 cm boşluk */
        }

        .mb-4 {
            margin-bottom: 3rem !important;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2 class="text-center my-4">Görsel Yükle</h2>

        <div class="row justify-content-center">
            <div class="col-md-8 text-center">
                <form asp-controller="RenderNet" asp-action="UploadImage" enctype="multipart/form-data" method="post" id="uploadForm">
                    <div class="mb-4">
                        <label class="btn btn-secondary file-select">
                            Görsel Seç
                            <input type="file" name="formFile" id="formFile" accept="image/*" />
                        </label>
                    </div>
                    <button type="submit" class="btn btn-primary w-50">Yükle</button>
                </form>
            </div>
        </div>

        <div id="imageContainer" class="mt-4">
            <img id="uploadedImage" src="" alt="Yüklenen Fotoğraf" />
            <div id="frame"></div>
        </div>

        <div class="text-center mt-3 mb-3">
            <button id="confirmButton" class="btn btn-success" style="display: none;">Tamam</button>
        </div>

        <div id="loading" style="display: none; text-align: center; margin-top: 20px;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Yükleniyor...</span>
            </div>
        </div>
    </div>

    <script>
        const fileInput = document.getElementById('formFile');
        const imageContainer = document.getElementById('imageContainer');
        const uploadedImage = document.getElementById('uploadedImage');
        const frame = document.getElementById('frame');
        const confirmButton = document.getElementById('confirmButton');
        const loading = document.getElementById('loading');

        fileInput.addEventListener('change', function(event) {
            const file = event.target.files[0];
            if (file && file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    uploadedImage.src = e.target.result;
                    imageContainer.style.display = 'block';
                    frame.style.display = 'block';
                    confirmButton.style.display = 'inline-block';
                    frame.style.left = '0px';
                    frame.style.top = '0px';
                };
                reader.readAsDataURL(file);
            }
        });

        document.getElementById('uploadForm').addEventListener('submit', function(event) {
            event.preventDefault();
            const formData = new FormData(this);
            loading.style.display = 'block';

            fetch(this.action, {
                method: 'POST',
                body: formData
            }).then(response => response.json()).then(data => {
                loading.style.display = 'none';
                alert('Görsel başarıyla yüklendi!');
            }).catch(error => {
                loading.style.display = 'none';
                alert('Yükleme sırasında bir hata oluştu.');
            });
        });

        let isDragging = false, startX, startY;

        frame.addEventListener('mousedown', function(e) {
            isDragging = true;
            startX = e.clientX - frame.offsetLeft;
            startY = e.clientY - frame.offsetTop;
        });

        document.addEventListener('mousemove', function(e) {
            if (isDragging) {
                let newLeft = e.clientX - startX;
                let newTop = e.clientY - startY;

                const containerRect = imageContainer.getBoundingClientRect();
                const frameRect = frame.getBoundingClientRect();

                if (newLeft < 0) newLeft = 0;
                if (newTop < 0) newTop = 0;
                if (newLeft + frameRect.width > containerRect.width) newLeft = containerRect.width - frameRect.width;
                if (newTop + frameRect.height > containerRect.height) newTop = containerRect.height - frameRect.height;

                frame.style.left = newLeft + 'px';
                frame.style.top = newTop + 'px';
            }
        });

        document.addEventListener('mouseup', function() {
            isDragging = false;
        });

        confirmButton.addEventListener('click', function() {
            const left = parseFloat(frame.style.left);
            const top = parseFloat(frame.style.top);
            const frameWidth = frame.offsetWidth;
            const frameHeight = frame.offsetHeight;

            const canvas = document.createElement('canvas');
            canvas.width = 512;
            canvas.height = 512;
            const ctx = canvas.getContext('2d');

            const img = new Image();
            img.src = uploadedImage.src;
            img.onload = function() {
                const imgRect = uploadedImage.getBoundingClientRect();
                const scaleX = img.naturalWidth / imgRect.width;
                const scaleY = img.naturalHeight / imgRect.height;

                const srcX = left * scaleX;
                const srcY = top * scaleY;
                const srcWidth = frameWidth * scaleX;
                const srcHeight = frameHeight * scaleY;

                ctx.drawImage(img, srcX, srcY, srcWidth, srcHeight, 0, 0, 512, 512);

                uploadedImage.src = canvas.toDataURL('image/png');
                frame.style.display = 'none';
                confirmButton.style.display = 'none';

                alert(`Kırpma tamamlandı: 512x512 oluşturuldu!`);
            };
        });
    </script>
</body>
</html>
